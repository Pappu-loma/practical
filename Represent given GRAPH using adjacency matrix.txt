#include <iostream>
#include <vector>
#include <queue>
#include <map>
using namespace std;

class Graph {
    map<string, vector<string>> adj;
public:
    void addEdge(string u, string v) {
        adj[u].push_back(v);
        adj[v].push_back(u); // Undirected graph
    }

    void DFS(string start, map<string, bool>& visited) {
        cout << start << " ";
        visited[start] = true;

        for (string neighbor : adj[start]) {
            if (!visited[neighbor])
                DFS(neighbor, visited);
        }
    }

    void BFS(string start) {
        map<string, bool> visited;
        queue<string> q;

        visited[start] = true;
        q.push(start);

        while (!q.empty()) {
            string node = q.front();
            q.pop();
            cout << node << " ";

            for (string neighbor : adj[node]) {
                if (!visited[neighbor]) {
                    visited[neighbor] = true;
                    q.push(neighbor);
                }
            }
        }
    }

    void startDFS(string start) {
        map<string, bool> visited;
        cout << "DFS Traversal: ";
        DFS(start, visited);
        cout << endl;
    }

    void startBFS(string start) {
        cout << "BFS Traversal: ";
        BFS(start);
        cout << endl;
    }
};

int main() {
    Graph g;

    g.addEdge("Gate", "Library");
    g.addEdge("Gate", "Canteen");
    g.addEdge("Library", "Auditorium");
    g.addEdge("Canteen", "Auditorium");
    g.addEdge("Canteen", "Hostel");

    g.startDFS("Gate");
    g.startBFS("Gate");

    return 0;
}
